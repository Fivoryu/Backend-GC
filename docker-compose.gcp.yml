version: '3.8'

services:
  # Aplicación Django para desarrollo con emuladores GCP
  web-gcp:
    build:
      context: .
      dockerfile: Dockerfile.gcp
      target: builder
    ports:
      - "8080:8080"
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=config.settings
      - SECRET_KEY=dev-secret-key-change-in-production
      - DB_NAME=condominium_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=postgres-gcp
      - DB_PORT=5432
      - GOOGLE_CLOUD_PROJECT=condominium-dev
      - GS_BUCKET_NAME=condominium-dev-bucket
      - PORT=8080
    depends_on:
      postgres-gcp:
        condition: service_healthy
      gcp-emulator:
        condition: service_started
    volumes:
      - .:/app
      - gcp_data:/app/gcp_data
    networks:
      - gcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL compatible con Cloud SQL
  postgres-gcp:
    image: postgres:15.8-alpine
    environment:
      POSTGRES_DB: condominium_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5433:5432"
    volumes:
      - postgres_gcp_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - gcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d condominium_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Emulador de Google Cloud Storage
  gcp-emulator:
    image: fsouza/fake-gcs-server:latest
    ports:
      - "4443:4443"
    command: [
      "-scheme", "http",
      "-host", "0.0.0.0",
      "-port", "4443",
      "-public-host", "localhost:4443"
    ]
    volumes:
      - gcs_data:/data
    networks:
      - gcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4443/storage/v1/b"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Proxy nginx para simular Cloud Load Balancer
  nginx-gcp:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-gcp.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-gcp
    networks:
      - gcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis para caché (compatible con Memorystore)
  redis-gcp:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_gcp_data:/data
    networks:
      - gcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

volumes:
  postgres_gcp_data:
    driver: local
  gcs_data:
    driver: local
  redis_gcp_data:
    driver: local
  gcp_data:
    driver: local

networks:
  gcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16